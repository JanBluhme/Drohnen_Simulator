#pragma once
#include "line_buffered_istream.h"
#include "command.h"
#include "Scanner.h"
#include <vector>
#include <sstream>

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "Parser.hpp"
#include "location.hh"

namespace worse_io {
/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal 
 * references.
 * 
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */
template<typename T>
class Interpreter {
public:
    using ContentType = T;
private:
	line_buffered_istream source;
	Scanner<T>           m_scanner;
	Parser               m_parser;
	std::vector<T> m_content; // Example AST
	worse_io::position   position_a;
	worse_io::position   position_b;
    bool requests_without_response_allowed_{false};
public:
	worse_io::location location() const {
		return {position_a, position_b};
	}
	Interpreter(std::istream& source, bool requests_without_response_allowed = false)
		: source(source)
		, m_content()
		, m_scanner(*this)
		, m_parser(m_scanner, *this)
        , requests_without_response_allowed_{requests_without_response_allowed}
	{
		switchInputStream(&this->source);
	}
	
	/**
	* Run parser. Results are stored inside.
	* \returns 0 on success, 1 on failure
	*/
	int parse() {
		this->position_a = worse_io::position();
		this->position_b = worse_io::position();
		return m_parser.parse();
	}
    bool requests_without_response_allowed() const{
        return requests_without_response_allowed_;
    }
	
	std::vector<T> const& content() const {
		return m_content;
	}
	
	std::string const& current_line() const {
		return source.current_line();
	}
	
	/**
	* Clear AST
	*/
	void clear() {
		this->position_a = worse_io::position();
		this->position_b = worse_io::position();
		m_content.clear();
	}
private:
	/**
	* Switch scanner input stream. Default is standard input (std::cin).
	* It will also reset AST.
	*/
	void switchInputStream(std::istream* is) {
		m_scanner.switch_streams(is, NULL);
		m_content.clear();    
	}
	/**
	* This is needed so that Scanner and Parser can call some
	* methods that we want to keep hidden from the end user.
	*/
	friend class Parser;
	friend class Scanner<T>;
	
	// Used internally by Parser to insert AST nodes.
	void addContent(T const& c) {
		m_content.push_back(c);
	}
	worse_io::location advance_column(int n) {
		worse_io::location old_location = location();
		position_a = position_b;
		position_b.columns(n);
		return old_location;
	}
	worse_io::location advance_line(int n) {
		worse_io::location old_location = location();
		position_a = position_b;
		position_b.lines(n);
		return old_location;
	}
};

}
